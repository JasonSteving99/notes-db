import json
import click
from typing import List, Dict, Any
from collections import defaultdict
from pydantic import BaseModel, Field


# Define Pydantic model for Gemini API response
class WeeklyInsights(BaseModel):
    """Model for weekly notes insights generated by Gemini."""
    summary: str = Field(..., description="A 2-3 sentence summary of the week's activities and themes")
    accomplishments: List[str] = Field(..., description="3-5 key accomplishments or insights from the notes")
    themes: List[str] = Field(..., description="3 main themes that emerged throughout the notes")


def generate_insights(notes: List[Dict[str, Any]], api_key: str | None = None) -> Dict[str, Any]:
    """Generate insights and summary from the notes using Gemini API if available."""
    
    insights = {
        "total_notes": len(notes),
        "topic_distribution": {},
        "key_accomplishments": [],
        "summary": "",
        "themes": []
    }
    
    # Count tag frequencies
    tag_count = defaultdict(int)
    for note in notes:
        tags = note.get("tags", "").split(", ") if note.get("tags") else []
        for tag in tags:
            if tag:
                tag_count[tag] += 1
    
    insights["topic_distribution"] = dict(tag_count)
    
    try:
        # If API key is provided, use Gemini for deeper analysis
        if api_key:
            from google import genai
            from google.genai.types import GenerateContentConfig
            
            # Prepare notes data for the API
            input_data = {
                "total_notes": len(notes),
                "notes": [
                    {
                        "title": note["title"],
                        "content": note["content"][:500],  # Truncate long content
                        "tags": note["tags"] or "None",
                        "created_at": note["created_at"]
                    }
                    for note in notes[:10]  # Limit to 10 notes to avoid token limits
                ]
            }
            
            # System instruction prompt
            prompt = """
            You are an insightful personal assistant analyzing a week's worth of notes.
            Extract meaningful patterns and insights from these notes.
            Provide a concise summary that captures the essence of the week, 
            identify key accomplishments, and detect underlying themes.
            Be specific and reference actual content from the notes provided.
            """
            
            # Initialize the client
            client = genai.Client(api_key=api_key)
            
            # Generate content using Gemini API
            try:
                response = client.models.generate_content(
                    model="gemini-1.5-pro",  # Use latest available model
                    config=GenerateContentConfig(
                        system_instruction=prompt,
                        temperature=0.2,  # Lower for more focused analysis
                        top_p=0.95,
                        response_mime_type="application/json",
                        response_schema=WeeklyInsights,
                    ),
                    contents=json.dumps(input_data, indent=2),
                )
                
                # Parse response into our Pydantic model
                try:
                    insights_model = WeeklyInsights.model_validate_json(response.text)
                    
                    # Update insights with Gemini's analysis
                    insights["summary"] = insights_model.summary
                    insights["key_accomplishments"] = insights_model.accomplishments
                    insights["themes"] = insights_model.themes
                    
                    return insights
                    
                except Exception as e:
                    click.echo(f"Error parsing Gemini response: {str(e)}", err=True)
                    click.echo(f"Response received: {response.text[:100]}...")
            except Exception as e:
                click.echo(f"Error generating content with Gemini: {str(e)}", err=True)
    except Exception as e:
        # Log error but continue with basic analysis
        click.echo(f"Error using Gemini API: {str(e)}", err=True)
    
    click.echo("Using basic analysis for generating insights...")
    
    # Basic analysis (fallback if API is not available or fails)
    
    # Extract key accomplishments (using titles of the 3 most recent notes)
    insights["key_accomplishments"] = [note["title"] for note in notes[:3]]
    
    # Extract simple themes from tags
    top_tags = sorted(tag_count.items(), key=lambda x: x[1], reverse=True)[:3]
    insights["themes"] = [f"{tag.replace('-', ' ').title()} Focus" for tag, _ in top_tags]
    
    # Generate a simple summary
    accomplishments = ", ".join([f'"{acc}"' for acc in insights["key_accomplishments"]])
    top_topics = ", ".join([f"{topic} ({count})" for topic, count in top_tags])
    
    insights["summary"] = f"""
    This week included {insights['total_notes']} notes across various topics. 
    Key accomplishments included {accomplishments}. 
    The most frequent topics were {top_topics}.
    """
    
    return insights
